Patch to prevent FTBFS on AMD64 (alignof and off_t) because of -Werror.
Based on upstream commits 3b93dcc, 6555359 and 61019c3

diff --git a/NEWS b/NEWS
index ace3406..6e9bdfc 100644
--- a/NEWS
+++ b/NEWS
@@ -127,6 +127,7 @@ Miscellaneous:
 
 Build system and compile-time errors (ignore if you don't build ELinks):
 
+* serious Debian bug 464384: fix cast warnings in alignof and ssl_connect
 * bug 725: fix version checking for Ruby in 'configure'
 * enhancement: if make -k was used and a sub-Make fails, build the
   rest before propagating
diff --git a/src/cache/cache.c b/src/cache/cache.c
index db9efe1..8b05080 100644
--- a/src/cache/cache.c
+++ b/src/cache/cache.c
@@ -40,9 +40,11 @@ static void truncate_entry(struct cache_entry *cached, off_t offset, int final);
 
 #define dump_frag(frag, count) \
 do { \
-	DBG(" [%d] f=%p offset=%" OFF_T_FORMAT " length=%" OFF_T_FORMAT \
-	    " real_length=%" OFF_T_FORMAT, \
-	    count, frag, frag->offset, frag->length, frag->real_length); \
+	DBG(" [%d] f=%p offset=%" OFF_PRINT_FORMAT \
+	    " length=%" OFF_PRINT_FORMAT \
+	    " real_length=%" OFF_PRINT_FORMAT, \
+	    count, frag, (off_print_T) frag->offset, \
+	    (off_print_T) frag->length, (off_print_T) frag->real_length); \
 } while (0)
 
 #define dump_frags(entry, comment) \
diff --git a/src/cache/dialogs.c b/src/cache/dialogs.c
index b0a33b3..29a9446 100644
--- a/src/cache/dialogs.c
+++ b/src/cache/dialogs.c
@@ -82,10 +82,10 @@ get_cache_entry_info(struct listbox_item *item, struct terminal *term)
 		}
 	}
 
-	add_format_to_string(&msg, "\n%s: %" OFF_T_FORMAT, _("Size", term),
-	                     cached->length);
-	add_format_to_string(&msg, "\n%s: %" OFF_T_FORMAT, _("Loaded size", term),
-						cached->data_size);
+	add_format_to_string(&msg, "\n%s: %" OFF_PRINT_FORMAT, _("Size", term),
+			     (off_print_T) cached->length);
+	add_format_to_string(&msg, "\n%s: %" OFF_PRINT_FORMAT, _("Loaded size", term),
+			     (off_print_T) cached->data_size);
 	if (cached->content_type) {
 		add_format_to_string(&msg, "\n%s: %s", _("Content type", term),
 				     cached->content_type);
diff --git a/src/dialogs/document.c b/src/dialogs/document.c
index ba55ea2..458e839 100644
--- a/src/dialogs/document.c
+++ b/src/dialogs/document.c
@@ -152,8 +152,9 @@ document_info_dialog(struct session *ses)
 	if (cached) {
 		unsigned char *a;
 
-		add_format_to_string(&msg, "\n%s: %" OFF_T_FORMAT,
-				     _("Size", term), cached->length);
+		add_format_to_string(&msg, "\n%s: %" OFF_PRINT_FORMAT,
+				     _("Size", term),
+				     (off_print_T) cached->length);
 
 		if (cached->incomplete) {
 			add_format_to_string(&msg, " (%s)", _("incomplete", term));
diff --git a/src/network/ssl/socket.c b/src/network/ssl/socket.c
index 19b8941..eabd8a3 100644
--- a/src/network/ssl/socket.c
+++ b/src/network/ssl/socket.c
@@ -154,8 +154,15 @@ ssl_connect(struct socket *socket)
 	}
 
 #elif defined(CONFIG_GNUTLS)
+	/* GnuTLS uses function pointers for network I/O.  The default
+	 * functions take a file descriptor, but it must be passed in
+	 * as a pointer.  GnuTLS uses the GNUTLS_INT_TO_POINTER and
+	 * GNUTLS_POINTER_TO_INT macros for these conversions, but
+	 * those are unfortunately not in any public header.  So
+	 * ELinks must just cast the pointer the best it can and hope
+	 * that the conversions match.  */
 	gnutls_transport_set_ptr(*((ssl_t *) socket->ssl),
-				 (gnutls_transport_ptr) socket->fd);
+				 (gnutls_transport_ptr) (longptr_T) socket->fd);
 
 	/* TODO: Some certificates fuss. --pasky */
 #endif
diff --git a/src/osdep/generic.h b/src/osdep/generic.h
index 9223cd5..357b602 100644
--- a/src/osdep/generic.h
+++ b/src/osdep/generic.h
@@ -102,7 +102,7 @@ safe_write(int fd, const void *buf, size_t count) {
 
 /* Alignment of types.  */
 #define alignof(TYPE) \
-    ((int) &((struct { unsigned char dummy1; TYPE dummy2; } *) 0)->dummy2)
+    offsetof(struct { unsigned char dummy1; TYPE dummy2; }, dummy2)
 
 /* Using this macro to copy structs is both faster and safer than
  * memcpy(destination, source, sizeof(source)). Please, use this macro instead
diff --git a/src/osdep/types.h b/src/osdep/types.h
index 2404ac0..f1c42f8 100644
--- a/src/osdep/types.h
+++ b/src/osdep/types.h
@@ -146,12 +146,24 @@ typedef unsigned long long uint32_t;
  */
 typedef long longptr_T;
 
-/* Define internal off_t format macro for printing variables. */
-#if HAVE_OFF_T == 1 && SIZEOF_OFF_T == 8
-#define OFF_T_FORMAT "lld"
+/* To print off_t offset, ELinks does:
+ *
+ * printf("%" OFF_PRINT_FORMAT, (off_print_T) offset);
+ *
+ * The cast is necessary because it is not possible to guess
+ * a printf format for off_t itself based on what we have here.
+ * The off_t type might be either long or long long, and the format
+ * string must match even if both types have the same representation,
+ * because GCC warns about mismatches and --enable-debug adds -Werror
+ * to $CFLAGS.  */
+#if !HAVE_OFF_T || SIZEOF_OFF_T <= SIZEOF_LONG
+typedef long off_print_T;
+# define OFF_PRINT_FORMAT "ld"
+#elif HAVE_LONG_LONG && SIZEOF_OFF_T <= SIZEOF_LONG_LONG
+typedef long long off_print_T;
+# define OFF_PRINT_FORMAT "lld"
 #else
-/* For ELinks, off_t defaults to long. */
-#define OFF_T_FORMAT "ld"
+# error "cannot figure out how to print off_t values"
 #endif
 
 #endif
diff --git a/src/protocol/fsp/fsp.c b/src/protocol/fsp/fsp.c
index 06b24ef..efa6e2e 100644
--- a/src/protocol/fsp/fsp.c
+++ b/src/protocol/fsp/fsp.c
@@ -314,7 +314,8 @@ do_fsp(struct connection *conn)
 #endif
 
 		/* Send filesize */
-		fprintf(stderr, "%" OFF_T_FORMAT "\n", (off_t)(sb.st_size));
+		fprintf(stderr, "%" OFF_PRINT_FORMAT "\n",
+			(off_print_T) sb.st_size);
 		fclose(stderr);
 
 		while ((r = fsp_fread(buf, 1, READ_SIZE, file)) > 0)
diff --git a/src/protocol/ftp/ftp.c b/src/protocol/ftp/ftp.c
index 1320127..eefe8b1 100644
--- a/src/protocol/ftp/ftp.c
+++ b/src/protocol/ftp/ftp.c
@@ -1170,7 +1170,8 @@ display_dir_entry(struct cache_entry *cached, off_t *pos, int *tries,
 	add_to_string(&string, "   1 ftp      ftp ");
 
 	if (ftp_info->size != FTP_SIZE_UNKNOWN) {
-		add_format_to_string(&string, "%12" OFF_T_FORMAT " ", ftp_info->size);
+		add_format_to_string(&string, "%12" OFF_PRINT_FORMAT " ",
+				     (off_print_T) ftp_info->size);
 	} else {
 		add_to_string(&string, "           - ");
 	}
diff --git a/src/protocol/smb/smb2.c b/src/protocol/smb/smb2.c
index 30908b3..0a839db 100644
--- a/src/protocol/smb/smb2.c
+++ b/src/protocol/smb/smb2.c
@@ -349,7 +349,8 @@ do_smb(struct connection *conn)
 			smb_error(res);
 		}
 		/* filesize */
-		fprintf(stderr, "%" OFF_T_FORMAT, sb.st_size);
+		fprintf(stderr, "%" OFF_PRINT_FORMAT,
+			(off_print_T) sb.st_size);
 		fclose(stderr);
 
 		while ((r = smbc_read(file, buf, READ_SIZE)) > 0) {
